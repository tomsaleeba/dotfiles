#!/bin/bash
# Run yarn commands in a docker container to protected against malicious
# dependencies trying to attach your system
set -euo pipefail

echo "[WARN] this is still a work in progress"

# Goals
# - mount all required config files. We do it dynamically in case the username
#   changes.
# - run as current user so perms are right on host
# - only mount current project: the sandbox

# Known bugs:
# - `yarn cache clean` fails because the dir mounted from the host cannot be
#   deleted in the container.
# - if your task depends on env vars, it will probably fail because we don't
#   pass those into the container
# - some commands might be missing:
#    - make
# - ports are not bound. Q: can this be solved by binding to the host interface?

# Thoughts
# Maybe we only need to run initial risky commands in the container, like the
# initial install. Other things are run using native yarn.

version=14
dockerImage=node:$version-alpine
theDir=/work
allArgs=$@

echo "[INFO] running yarn in docker image $dockerImage"

if [ ${DEBUG:-0} = 1 ]; then
  dropToShell='; sh'
fi

# from https://docs.docker.com/engine/reference/run/#network-host
# > --network="host" gives the container full access to local system services such
# > as D-bus and is therefore considered insecure.
# FIXME Maybe we want a flag to turn it on/off?
networkFragment='--network=host'
echo "[INFO] docker host networking enabled!"

docker run \
  --tty \
  --interactive \
  --rm \
  --user $(id -u):$(id -g) \
  $networkFragment \
  --volume $PWD:$theDir \
  --volume ~/.yarn:/z/.yarn \
  --volume ~/.npm:/z/.npm \
  --volume ~/.config/yarn:/z/.config/yarn \
  --volume ~/.cache/yarn:/z/.cache/yarn \
  --workdir $theDir \
  --entrypoint /bin/sh \
  $dockerImage \
  -c "for c in \$(cd /z && ls -A); do ln -s /z/\$c ~/\$c; done && yarn $allArgs ${dropToShell:-}"
